generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Operador {
  id       String   @id @default(uuid())
  nome     String   @unique @map("usuario") // mantém mapeamento existente
  senha    String
  ativo    Boolean  @default(true)
  criadoEm DateTime @default(now()) @map("createdAt")

  @@map("operadores")
}

model Frota {
  id           String        @id @default(uuid())
  criadoEm     DateTime      @default(now()) @map("createdAt")
  nome         String?
  dispositivos Dispositivo[]
  vendas       Venda[]

  @@index([criadoEm])
}

model Venda {
  id        String   @id @default(uuid())
  frotaId   String
  // ⬇️ trocado de Float para Int em centavos (evita erro de arredondamento)
  valorCent Int
  data      DateTime @default(now())
  frota     Frota    @relation(fields: [frotaId], references: [id])

  @@index([frotaId])
  @@index([data])
}

model Dispositivo {
  id       String   @id @default(uuid())
  ip       String
  criadoEm DateTime @default(now()) @map("createdAt")
  frotaId  String
  frota    Frota    @relation(fields: [frotaId], references: [id])

  // Se quiser impedir IP repetido na mesma frota, descomente:
  // @@unique([frotaId, ip])

  @@index([frotaId])
  @@index([ip])
}

model Pagamento {
  id           String        @id @default(cuid())
  txid         String?       @unique // txid Pix (se houver)
  externalId   String?       @unique // id/código no PSP
  valorCent    Int
  descricao    String?
  status       String        @default("pendente") // pendente | pago | expirado | cancelado
  expiracaoAt  DateTime?
  payloadPix   String? // copia-e-cola (EMV) ou qrcode base64
  clienteIp    String? // IP do cliente (liberação Mikrotik)
  clienteMac   String? // opcional
  criadoEm     DateTime      @default(now())
  atualizadoEm DateTime      @updatedAt
  SessaoAtiva  SessaoAtiva[]

  // ⬇️ índices úteis para consultas e relatórios
  @@index([status])
  @@index([criadoEm])
}

model SessaoAtiva {
  id          String     @id @default(cuid())
  ipCliente   String     @unique
  macCliente  String?
  plano       String
  inicioEm    DateTime   @default(now())
  expiraEm    DateTime
  ativo       Boolean    @default(true)
  pagamentoId String?
  pagamento   Pagamento? @relation(fields: [pagamentoId], references: [id], onDelete: SetNull)

  @@index([ativo])
  @@index([pagamentoId])
  @@map("sessoes_ativas")
}

model Transacao {
  id        String    @id @default(cuid())
  txid      String    @unique
  valor     Decimal   @db.Decimal(10, 2)
  descricao String
  status    Status    @default(PENDENTE)
  mac       String?
  ip        String?
  minutos   Int?      @default(120)
  linkOrig  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  paidAt    DateTime?
}

enum Status {
  PENDENTE
  PAGO
  EXPIRADO
  CANCELADO
}

model Config {
  key       String   @id
  value     String
  updatedAt DateTime @updatedAt
}
