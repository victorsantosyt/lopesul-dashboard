generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Operador {
  id       String   @id @default(uuid())
  nome     String   @unique @map("usuario") // mantÃ©m mapeamento existente
  senha    String
  ativo    Boolean  @default(true)
  criadoEm DateTime @default(now()) @map("createdAt")

  @@map("operadores")
}

model Frota {
  id           String        @id @default(uuid())
  criadoEm     DateTime      @default(now()) @map("createdAt")
  nome         String?
  dispositivos Dispositivo[]
  vendas       Venda[]

  @@index([criadoEm])
}

model Venda {
  id        String   @id @default(uuid())
  frotaId   String
  valorCent Int
  data      DateTime @default(now())
  frota     Frota    @relation(fields: [frotaId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // consultas por frota ordenadas por data
  @@index([frotaId, data])
}

model Dispositivo {
  id           String   @id @default(uuid())
  ip           String   @db.Inet // valida IPv4/IPv6 no Postgres
  criadoEm     DateTime @default(now()) @map("createdAt")
  atualizadoEm DateTime @updatedAt
  frotaId      String
  frota        Frota    @relation(fields: [frotaId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // impede IP duplicado dentro da MESMA frota
  @@unique([frotaId, ip])
  @@index([ip])
}

model SessaoAtiva {
  id         String   @id @default(cuid())
  ipCliente  String   @unique
  macCliente String?
  plano      String
  inicioEm   DateTime @default(now())
  expiraEm   DateTime
  ativo      Boolean  @default(true)

  // relacionamento agora Ã© com Pedido
  pedidoId String?
  pedido   Pedido? @relation(fields: [pedidoId], references: [id], onDelete: SetNull)

  @@index([ativo])
  @@index([pedidoId])
  @@map("sessoes_ativas")
}

model Config {
  key       String   @id
  value     String
  updatedAt DateTime @updatedAt
}

//
// ðŸ”¥ Modelos para integraÃ§Ã£o Pagar.me
//
enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELED
  EXPIRED
}

enum PaymentMethod {
  PIX
  CARD
  BOLETO
}

enum ChargeStatus {
  CREATED
  AUTHORIZED
  PAID
  REFUNDED
  FAILED
  CANCELED
}

model Pedido {
  id            String        @id @default(cuid())
  code          String        @unique
  amount        Int
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  description   String?
  deviceMac     String?
  ip            String?       @db.Inet // consistente com Dispositivo/ip
  busId         String?
  customerName  String?
  customerEmail String?
  customerDoc   String?
  metadata      Json?
  charges       Charge[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  SessaoAtiva   SessaoAtiva[]

  @@index([status, createdAt])
  @@index([method, createdAt])
}

model Charge {
  id         String        @id @default(cuid())
  pedidoId   String
  pedido     Pedido        @relation(fields: [pedidoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  providerId String? // id da charge no Pagar.me
  status     ChargeStatus  @default(CREATED)
  method     PaymentMethod
  qrCode     String? // Pix copia-e-cola
  qrCodeUrl  String? // Pix imagem
  raw        Json?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@index([pedidoId])
  @@index([status, createdAt])
  @@index([providerId])
}

model WebhookLog {
  id        String   @id @default(cuid())
  event     String?
  orderCode String?
  payload   Json?
  createdAt DateTime @default(now())

  @@index([createdAt])
  @@index([event])
}
